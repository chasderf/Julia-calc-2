julia> using OrdinaryDiffEq

julia> using Plots

julia> using ModelingToolkit

julia> S0, I0, R0 = 7_900_000, 10, 0
(7900000, 10, 0)

julia> N = S0 + I0 + R0
7900010

julia> u0 = [S0, I0, R0]/N
3-element Vector{Float64}:
 0.9999987341788175
 1.2658211825048323e-6
 0.0

julia> k = 1/3
0.3333333333333333

julia>

julia> f(u,p,t) = -k * u  # solving  u′(t) = - k u(t)
f (generic function with 1 method)

julia> time_span = (0.0, 20.0)
(0.0, 20.0)

julia>

julia> prob = ODEProblem(f, I0/N, time_span)
ODEProblem with uType Float64 and tType Float64. In-place: false
timespan: (0.0, 20.0)
u0: 1.2658211825048323e-6

julia> sol = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)
retcode: Success
Interpolation: specialized 4th order "free" interpolation
t: 11-element Vector{Float64}:
  0.0
  0.18834317579002668
  1.0332402290109235
  2.3557140017928333
  3.916920152135651
  5.958713367865979
  8.40066987566879
 11.42158973565928
 15.072935093621016
 19.592419731414797
 20.0
u: 11-element Vector{Float64}:
 1.2658211825048323e-6
 1.1887947860828573e-6
 8.970064039730199e-7
 5.772294509946057e-7
 3.430384315455397e-7
 1.736909662492128e-7
 7.697007649548679e-8
 2.8136638480819198e-8
 8.353878250230317e-9
 1.880656956727412e-9
 1.6417472513082639e-9

julia>

julia> plot(sol)

julia> function sir!(du, u, p, t)
           k, b = p
           s, i, r = u[1], u[2], u[3]

           ds = -b * s * i
           di =  b * s * i - k * i
           dr =              k * i

           du[1], du[2], du[3] = ds, di, dr
       end
sir! (generic function with 1 method)

julia> p = (k=1/3, b=1/2)
(k = 0.3333333333333333, b = 0.5)

julia> time_span = (0.0, 150.0)
(0.0, 150.0)

julia> prob = ODEProblem(sir!, u0, time_span, p)
ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
timespan: (0.0, 150.0)
u0: 3-element Vector{Float64}:
 0.9999987341788175
 1.2658211825048323e-6
 0.0

julia> sol = solve(prob, Tsit5())
retcode: Success
Interpolation: specialized 4th order "free" interpolation
t: 22-element Vector{Float64}:
   0.0
   0.5164078608277606
   3.9579522254531536
  10.122293992369102
  17.072940069697562
  24.678185715574052
  32.34310265663454
  39.86993713964485
  47.254954680937956
  54.64484893269113
  62.274187848127106
  70.18351880717876
  79.1748825315496
  86.91930013571464
  95.72859493098039
 104.97850681899727
 112.48765704575214
 120.60487406001177
 128.4253791520229
 136.86368467775372
 145.83954665977043
 150.0
u: 22-element Vector{Vector{Float64}}:
 [0.9999987341788175, 1.2658211825048323e-6, 0.0]
 [0.9999983928617797, 1.3795932015689473e-6, 2.2754501871963626e-7]
 [0.9999951868776511, 2.4482477172605235e-6, 2.3648746316983384e-6]
 [0.9999820141228011, 6.839065973067741e-6, 1.1146811225945629e-5]
 [0.9999372005011001, 2.177573439399447e-5, 4.1023764505957926e-5]
 [0.9997706122683981, 7.728894067649153e-5, 0.0001520987909255037]
 [0.9991717406314788, 0.0002767018669674239, 0.0005515575015538279]
 [0.997102608942899, 0.0009638409902231014, 0.0019335500668779713]
 [0.9902124311199071, 0.0032312653915861906, 0.006556303488506789]
 [0.9679737497085472, 0.010327307159205665, 0.021698943132247225]
 [0.9017361539583835, 0.02931262732638522, 0.06895121871523145]
 [0.7584019005059754, 0.05724057103214179, 0.18435752846188294]
 [0.5765651126844826, 0.05644371199771495, 0.3669911753178026]
 [0.4848141152225729, 0.03263622030786635, 0.48254966446956093]
 [0.4405513548856854, 0.013075762023221705, 0.546372883091093]
 [0.42454148465943936, 0.004400308697660651, 0.5710582066429001]
 [0.4199734273579195, 0.0017558316806334628, 0.5782707409614471]
 [0.41808993890530294, 0.0006426379430376192, 0.5812674231516596]
 [0.41741902159824285, 0.0002428710950798271, 0.5823381073066775]
 [0.417154645804744, 8.487151499530284e-5, 0.5827604826802608]
 [0.41705914256151344, 2.773034048166502e-5, 0.582913127098005]
 [0.41704037688375006, 1.6498513924233085e-5, 0.5829431246023259]

julia>

julia> plot(sol)

julia> plot!(x -> 0.5, linewidth=2)

julia> p = (k=1/2, b=2)
(k = 0.5, b = 2)

julia> prob = ODEProblem(sir!, u0, time_span, p)
ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
timespan: (0.0, 150.0)
u0: 3-element Vector{Float64}:
 0.9999987341788175
 1.2658211825048323e-6
 0.0

julia> sol = solve(prob, Tsit5())
retcode: Success
Interpolation: specialized 4th order "free" interpolation
t: 44-element Vector{Float64}:
   0.0
   0.35671878663484446
   1.109415146243852
   2.012016090577019
   2.973090464961944
   3.9331122387724755
   4.854055226825766
   5.740649317587543
   6.608806265109668
   7.478073171231253
   8.375925832933993
   9.265196766340388
  10.2770027388408
  11.376322313863856
  12.342953118298784
  13.755107353302803
  15.117820553552217
   ⋮
  37.25558200953477
  40.76476755860031
  45.03980823569792
  50.42890062020941
  57.45755899225131
  66.4729312606724
  76.42214376789906
  85.80352125107359
  94.14325065309002
 101.70506078417583
 108.9220495227171
 116.12710342943426
 123.48648851654154
 131.02978503092376
 138.7011330270514
 146.41809305495642
 150.0
u: 44-element Vector{Vector{Float64}}:
 [0.9999987341788175, 1.2658211825048323e-6, 0.0]
 [0.9999975399553195, 2.161488249782067e-6, 2.985564306500269e-7]
 [0.9999915101753108, 6.683815011527833e-6, 1.8060096775533988e-6]
 [0.9999659273866801, 2.5870770606441608e-5, 8.201842713345949e-6]
 [0.9998547089158696, 0.00010928213481921657, 3.60089493110776e-5]
 [0.9993861201006012, 0.00046067934721421937, 0.0001532005521844688]
 [0.997561586736482, 0.0018283832882311584, 0.0006100299752867424]
 [0.9908558360771748, 0.006847940165278784, 0.0022962237575463455]
 [0.967312865020723, 0.024379329326221357, 0.008307805653055483]
 [0.8907435363880251, 0.08033418499821623, 0.02892227861375844]
 [0.6906842062072703, 0.21680676884312614, 0.09250902494960328]
 [0.40615387673131625, 0.36860748354928696, 0.22523863971939656]
 [0.18265572098919727, 0.39228558611917397, 0.42505869289162856]
 [0.08465950911028773, 0.2982811589415654, 0.6170593319481468]
 [0.05197420639813255, 0.20901570909363057, 0.7390100845082368]
 [0.033215131241985094, 0.11582590708923177, 0.850958961668783]
 [0.026192891241662374, 0.06345648656070767, 0.9103506221976299]
 ⋮
 [0.019810236048111742, 2.468654681356592e-6, 0.9801872952972068]
 [0.019810066994646245, 5.042869784711828e-7, 0.9801894287183752]
 [0.019810030555561835, 8.086990801154462e-8, 0.98018988857453]
 [0.019810024854255783, 1.4621497550647088e-8, 0.9801899605242466]
 [0.019810024361609037, 8.89703138523827e-9, 0.9801899667413595]
 [0.019810025869005366, 2.6412917351039262e-8, 0.9801899477180772]
 [0.019810036458326564, 1.4946258359140713e-7, 0.9801898140790898]
 [0.019810073128282788, 5.756178630352613e-7, 0.9801893512538541]
 [0.01981011213252812, 1.029090312148006e-6, 0.9801888587771597]
 [0.01981010812235022, 9.827807616293208e-7, 0.980188909096888]
 [0.019810083952191027, 7.0208746402402e-7, 0.9801892139603449]
 [0.019810066252185295, 4.964963240350611e-7, 0.9801894372514905]
 [0.01981005795398743, 4.001227849597291e-7, 0.9801895419232275]
 [0.01981005589593915, 3.76250995188185e-7, 0.9801895678530655]
 [0.019810057374819206, 3.9348016321538365e-7, 0.9801895491450174]
 [0.01981006027826017, 4.272698591249517e-7, 0.9801895124518806]
 [0.01981003080812861, 8.483100826172854e-8, 0.980189884360863]

julia>

julia> plot(sol)

julia> p = (k=2/3, b=1/2)
(k = 0.6666666666666666, b = 0.5)

julia> prob = ODEProblem(sir!, u0, time_span, p)
ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
timespan: (0.0, 150.0)
u0: 3-element Vector{Float64}:
 0.9999987341788175
 1.2658211825048323e-6
 0.0

julia> sol = solve(prob, Tsit5())
retcode: Success
Interpolation: specialized 4th order "free" interpolation
t: 12-element Vector{Float64}:
   0.0
   0.4569086973842449
   3.476776496168304
   8.74325742653712
  15.303263943202333
  24.23793405047128
  35.72432365086141
  51.38593662576425
  72.75313764249505
 100.81943011642215
 130.34967049913317
 150.0
u: 12-element Vector{Vector{Float64}}:
 [0.9999987341788175, 1.2658211825048323e-6, 0.0]
 [0.9999984557334695, 1.1730055448825793e-6, 3.712609855751001e-7]
 [0.9999970640653335, 7.091120091115183e-7, 2.226822657269884e-6]
 [0.9999958213062144, 2.9485306692566675e-7, 3.883840718528801e-6]
 [0.9999952335198834, 9.892077881937746e-8, 4.667559337667354e-6]
 [0.9999950046460514, 2.2628007803312443e-8, 4.972725940716498e-6]
 [0.9999949479355976, 3.724142839187963e-9, 5.048340259498766e-6]
 [0.9999949391077686, 7.814739800914025e-10, 5.06011075743657e-6]
 [0.9999949393480647, 8.615748566738138e-10, 5.059790360403918e-6]
 [0.9999949535496562, 5.595544870751762e-9, 5.040854798881211e-6]
 [0.9999950888510599, 5.0697644998893204e-8, 4.860451294993088e-6]
 [0.9999950362891203, 3.317757874223344e-8, 4.930533300835144e-6]

julia>

julia> plot(sol)

julia> function recovered(k,b)
           prob = ODEProblem(sir!, u0, time_span, (k,b));
           sol = solve(prob, Tsit5());
           s,i,r = last(sol)
           r
       end
recovered (generic function with 1 method)

julia> f(b) = recovered(1/3, b)
f (generic function with 2 methods)

julia> plot(f, 0, 2)

julia> k, ks = 0.1, 0.2:0.1:0.9  # first `k` and then the rest
(0.1, 0.2:0.1:0.9)

julia> bs = range(0, 2, length=100)
0.0:0.020202020202020204:2.0

julia> zs = recovered.(k, bs)    # find values for fixed k, each of bs
100-element Vector{Float64}:
 1.2595934501026713e-6
 1.585965779327708e-6
 2.122744182189076e-6
 3.203611646357056e-6
 6.224335213930385e-6
 2.0499963672718787e-5
 0.00013772063853368947
 0.0015146175182266235
 0.020271771116310892
 0.20349596323261937
 0.5938411362865235
 0.7888562925755325
 0.864068409655095
 0.9015510108446251
 0.9249678388662794
 0.9414715026035644
 0.953785431250019
 ⋮
 0.9999992003343479
 0.9999992202081832
 0.9999992415389403
 0.9999992558932389
 0.999999267811412
 0.9999992766171356
 0.9999992808508579
 0.9999992912591279
 0.9999993019916934
 0.9999993117703571
 0.999999320728333
 0.999999328965316
 0.9999993365342053
 0.9999993434226908
 0.9999993495265537
 0.9999993546159707
 0.9999993582825595

julia> p = plot(bs, k*one.(bs), zs, legend=false)  # k*one.(ks) is [k,k,...,k]

julia> for k in ks
           plot!(p, bs, k*one.(bs), recovered.(k, bs))
       end

julia> function xy!(du, u, p, t)
           g, γ = p.g, p.k
           x, y = u[1], u[2]
           x′, y′ = u[3], u[4]  # unicode \prime[tab]

           W = γ

           du[1] = x′
           du[2] = y′
           du[3] =  0 - W * x′
           du[4] = -g - W * y′
       end
xy! (generic function with 1 method)

julia> θ = pi/4
0.7853981633974483

julia> v₀ = 200
200

julia> xy₀ = [0.0, 0.0]
2-element Vector{Float64}:
 0.0
 0.0

julia> vxy₀ = v₀ * [cos(θ), sin(θ)]
2-element Vector{Float64}:
 141.4213562373095
 141.42135623730948

julia> INITIAL = vcat(xy₀, vxy₀)
4-element Vector{Float64}:
   0.0
   0.0
 141.4213562373095
 141.42135623730948

julia> g = 9.8
9.8

julia> TSPAN = (0, 2*vxy₀[2] / g)
(0, 28.8615012729203)

julia> trajectory_problem = ODEProblem(xy!, INITIAL, TSPAN)
ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
timespan: (0.0, 28.8615012729203)
u0: 4-element Vector{Float64}:
   0.0
   0.0
 141.4213562373095
 141.42135623730948

julia> ps = (g=9.8, k=0)
(g = 9.8, k = 0)

julia> SOL = solve(trajectory_problem, Tsit5(); p = ps)
retcode: Success
Interpolation: specialized 4th order "free" interpolation
t: 9-element Vector{Float64}:
  0.0
  7.071017812218601e-6
  7.778119593440461e-5
  0.0007848829771562646
  0.007855900789374865
  0.07856607891156087
  0.7856678601334208
  7.85668567235202
 28.8615012729203
u: 9-element Vector{Vector{Float64}}:
 [0.0, 0.0, 141.4213562373095, 141.42135623730948]
 [0.0009999929289821274, 0.0009999926839855918, 141.4213562373095, 141.42128694133493]
 [0.010999922218803401, 0.010999892574222635, 141.4213562373095, 141.42059398158932]
 [0.11099921511701613, 0.11099619651470576, 141.4213562373095, 141.41366438413334]
 [1.1109921440991435, 1.110689739730802, 141.4213562373095, 141.3443684095736]
 [11.110921433920417, 11.080675553018281, 141.4213562373095, 140.65140866397618]
 [111.11021433213314, 108.08557179854463, 141.4213562373095, 133.72181120800195]
 [1111.1031433142605, 808.6383455189674, 141.4213562373095, 64.4258366482597]
 [4081.6326530612228, 6.904493425644323e-12, 141.4213562373095, -141.42135623730937]

julia>

julia> plot(t -> SOL(t)[1], t -> SOL(t)[2], TSPAN...; legend=false)

julia> SOL = solve(trajectory_problem, Tsit5(); p = ps, callback=cb)
ERROR: UndefVarError: `cb` not defined
Stacktrace:
 [1] top-level scope
   @ REPL[48]:1

julia>

julia> plot(t -> SOL(t)[1], t -> SOL(t)[2], TSPAN...; legend=false)

julia> ps = (g=9.8, k = 1/4)
(g = 9.8, k = 0.25)

julia> SOL = solve(trajectory_problem, Tsit5(); p = ps, callback=cb)
ERROR: UndefVarError: `cb` not defined
Stacktrace:
 [1] top-level scope
   @ REPL[51]:1

julia>

julia> plot(t -> SOL(t)[1], t -> SOL(t)[2], TSPAN...; legend=false)

julia> @parameters t γ g
3-element Vector{Num}:
 t
 γ
 g

julia> @variables x(t) y(t)
2-element Vector{Num}:
 x(t)
 y(t)

julia> D = Differential(t)
(::Differential) (generic function with 3 methods)

julia>

julia> eqs = [D(D(x)) ~ -γ * D(x),
              D(D(y)) ~ -g - γ * D(y)]
2-element Vector{Equation}:
 Differential(t)(Differential(t)(x(t))) ~ -Differential(t)(x(t))*γ
 Differential(t)(Differential(t)(y(t))) ~ -g - Differential(t)(y(t))*γ

julia> @named sys = ODESystem(eqs)
Model sys with 2 equations
States (2):
  x(t)
  y(t)
Parameters (2):
  γ
  g

julia> sys = ode_order_lowering(sys)
Model sys with 4 equations
States (4):
  xˍt(t)
  yˍt(t)
  x(t)
  y(t)
Parameters (2):
  γ
  g

julia> u0 = [D(x) => vxy₀[1],
             D(y) => vxy₀[2],
             x => 0.0,
             y => 0.0]
4-element Vector{Pair{Num, Float64}}:
 Differential(t)(x(t)) => 141.4213562373095
 Differential(t)(y(t)) => 141.42135623730948
                  x(t) => 0.0
                  y(t) => 0.0

julia>

julia> p  = [γ => 0.0,
             g => 9.8]
2-element Vector{Pair{Num, Float64}}:
 γ => 0.0
 g => 9.8

julia>

julia> prob = ODEProblem(sys, u0, TSPAN, p, jac=true)
ODEProblem with uType Vector{Float64} and tType Float64. In-place: true
timespan: (0.0, 28.8615012729203)
u0: 4-element Vector{Float64}:
 141.4213562373095
 141.42135623730948
   0.0
   0.0

julia> sol = solve(prob,Tsit5())
retcode: Success
Interpolation: specialized 4th order "free" interpolation
t: 9-element Vector{Float64}:
  0.0
  7.071017812218601e-6
  7.778119593440461e-5
  0.0007848829771562646
  0.007855900789374865
  0.07856607891156087
  0.7856678601334208
  7.85668567235202
 28.8615012729203
u: 9-element Vector{Vector{Float64}}:
 [141.4213562373095, 141.42135623730948, 0.0, 0.0]
 [141.4213562373095, 141.42128694133493, 0.0009999929289821274, 0.0009999926839855918]
 [141.4213562373095, 141.42059398158932, 0.010999922218803401, 0.010999892574222635]
 [141.4213562373095, 141.41366438413334, 0.11099921511701613, 0.11099619651470576]
 [141.4213562373095, 141.3443684095736, 1.1109921440991435, 1.110689739730802]
 [141.4213562373095, 140.65140866397618, 11.110921433920417, 11.080675553018281]
 [141.4213562373095, 133.72181120800195, 111.11021433213314, 108.08557179854463]
 [141.4213562373095, 64.4258366482597, 1111.1031433142605, 808.6383455189674]
 [141.4213562373095, -141.42135623730937, 4081.6326530612228, 6.904493425644323e-12]

julia>

julia> plot(t -> sol(t)[3], t -> sol(t)[4], TSPAN..., legend=false)

julia>