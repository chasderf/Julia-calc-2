julia> using CalculusWithJulia

julia> using Plots

julia> using Roots

julia> using QuadGK

julia> using SymPy

julia> f(x) = 2 - x^2
f (generic function with 1 method)

julia> g(x) = 2x
g (generic function with 1 method)

julia> plot(f, -3,3)

julia> plot!(g)

julia> a,b = find_zeros(x -> f(x) - g(x), -3, 3)
2-element Vector{Float64}:
 -2.732050807568877
  0.7320508075688773

julia> quadgk(x -> f(x) - g(x), a, b)[1]
6.928203230275509

julia> 𝒇(x) = sin(x)
𝒇 (generic function with 1 method)

julia> 𝒈(x) = cos(x)
𝒈 (generic function with 1 method)

julia> plot(𝒇, 0, 2pi)

julia> plot!(𝒈)

julia> 𝒂,𝒃 = find_zeros(x -> 𝒇(x) - 𝒈(x), 0, 2pi)
2-element Vector{Float64}:
 0.7853981633974483
 3.9269908169872414

julia> quadgk(x -> 𝒇(x) - 𝒈(x), 𝒂, 𝒃)[1]
2.8284271247461903

julia> @syms x::positive n::positive
(x, n)

julia> ex = integrate(x^n - x^(n+1), (x, 0, 1))
    1       1
- ───── + ─────
  n + 2   n + 1

julia> together(ex)
       1
───────────────
(n + 1)⋅(n + 2)

julia> p = plot(x, 0, 1, legend=false)

julia> [plot!(p, x^n, 0, 1) for n in 2:20]
19-element Vector{Plots.Plot{Plots.GRBackend}}:
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 ⋮
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}
 Plot{Plots.GRBackend() n=20}

julia> p

julia> summation(1/(n+1)/(n+2), (n, 1, oo))
1/2

julia> 𝐟(x) = 2 - x^2
𝐟 (generic function with 1 method)

julia> 𝐚, 𝐛 = -1, 1/2
(-1, 0.5)

julia> 𝐜 = (𝐚 + 𝐛)/2
-0.25

julia> sac, sab, scb = secant(𝐟, 𝐚, 𝐜), secant(𝐟, 𝐚, 𝐛), secant(𝐟, 𝐜, 𝐛)
(CalculusWithJulia.var"#18#19"{typeof(𝐟), Int64, Float64}(𝐟, -1, -0.25), CalculusWithJulia.var"#18#19"{typeof(𝐟), Int64, Float64}(𝐟, -1, 0.5), CalculusWithJulia.var"#18#19"{typeof(𝐟), Float64, Float64}(𝐟, -0.25, 0.5))

julia>  f1(x) = min(sac(x), scb(x))
f1 (generic function with 1 method)

julia> f2(x) = sab(x)
f2 (generic function with 1 method)

julia> A1 = quadgk(x -> f1(x) - f2(x), 𝐚, 𝐛)[1]
0.421875

julia> A2 = quadgk(x -> 𝐟(x) - f2(x), 𝐚, 𝐛)[1]
0.5625000000000001

julia> A1 * 4/3 - A2
-1.1102230246251565e-16

julia> h1(x) = x^4
h1 (generic function with 1 method)

julia> h2(x) = exp(x)
h2 (generic function with 1 method)

julia> plot(h1, 0, 10)

julia> plot!(h2)

julia> a,b = find_zeros(x -> h1(x) - h2(x), 0, 10)
2-element Vector{Float64}:
 1.4296118247255556
 8.613169456441398

julia> quadgk(x -> h1(x) - h2(x), a, b)[1]
3980.1173881924947

julia> m = 1/2
0.5

julia> plot(sin, 0, pi)

julia> plot!(x -> m*x)

julia> intersection_point(m) = maximum(find_zeros(x -> sin(x) - m*x, 0, pi))
intersection_point (generic function with 1 method)

julia> a1 = 0
0

julia> b1 = intersection_point(m)
1.895494267033981

julia> quadgk(x -> sin(x) - m*x, a1, b1)[1]
0.4207978950529467

julia> area(m) = quadgk(x -> sin(x) - m*x, 0, intersection_point(m))[1]
area (generic function with 1 method)

julia> find_zero(m -> area(m) - 1, (0, 1))
0.2566498569701879

julia> j1(x) = log(x+1)
j1 (generic function with 1 method)

julia> j2(x) = x - 1
j2 (generic function with 1 method)

julia> plot(j1, 0, 3)

julia> plot!(j2)

julia> plot!(zero)

julia>

julia> ja = 0
0

julia> jb = find_zero(x -> j1(x) - j2(x), 2)
2.1461932206205825

julia> quadgk(x -> j1(x) - zero(x), ja, 1)[1] + quadgk(x -> j1(x) - j2(x), 1, jb)[1]
0.8030726701188743

julia> j3(x) = x < 1 ? 0.0 : j2(x)
j3 (generic function with 1 method)

julia> quadgk(x -> j1(x) - j3(x), ja, jb)[1]
0.8030726629434394

julia> quadgk(y -> f1(y) - g1(y), a1, b1)[1]
0.8030726701188743

julia> @syms x::real y::real a::positive b::positive c::positive
(x, y, a, b, c)

julia> c₁ = x^2 + y^2 - a^2
   2    2    2
- a  + x  + y

julia> c₂ = x^2 + (y-c)^2 - b^2
   2    2           2
- b  + x  + (-c + y)

julia> y₀ = first(solve(c₁ ~ c₂ , y))
 2    2    2
a  - b  + c
────────────
    2⋅c

julia> x₀ = sqrt(a - y₀^2)
       _____________________
      ╱                   2
     ╱      ⎛ 2    2    2⎞
    ╱       ⎝a  - b  + c ⎠
   ╱    a - ───────────────
  ╱                  2
╲╱                4⋅c

julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)

julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)

           p = plot(; legend=false, aspect_ratio=:equal)
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)

           p = plot(; legend=false, aspect_ratio=:equal)

julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)

           p = plot(; legend=false, aspect_ratio=:equal)

           plot!(x -> 𝑐 + sqrt(𝑏^2 - x^2), -𝑏, 𝑏; color=:black)
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)

           p = plot(; legend=false, aspect_ratio=:equal)

           plot!(x -> 𝑐 + sqrt(𝑏^2 - x^2), -𝑏, 𝑏; color=:black)
           plot!(x -> 𝑐 - sqrt(𝑏^2 - x^2), -𝑏, -x; color=:black)
julia> let 𝑎 = 1, 𝑏=3/2, 𝑐=2

           @assert 0 ≤ 𝑐 - 𝑏 ≤ 𝑎

           y = N(y₀(a => 𝑎, b => 𝑏, c => 𝑐))
           x = sqrt(𝑎^2 - y^2)

           p = plot(; legend=false, aspect_ratio=:equal)

           plot!(x -> 𝑐 + sqrt(𝑏^2 - x^2), -𝑏, 𝑏; color=:black)
           plot!(x -> 𝑐 - sqrt(𝑏^2 - x^2), -𝑏, -x; color=:black)
           plot!(x -> 𝑐 - sqrt(𝑏^2 - x^2),  x,  𝑏; color=:black)

           plot!(x ->  sqrt(𝑎^2 - x^2), -x,  x; color=:black)
           plot!(x ->  sqrt(𝑎^2 - x^2), -𝑎, -x; color=:blue)
           plot!(x ->  sqrt(𝑎^2 - x^2),  x,  𝑎; color=:blue)
           plot!(x -> -sqrt(𝑎^2 - x^2), -𝑎,  𝑎; color=:blue)

           scatter!([-x, x], [y, y])

           plot!([0, 𝑏], [𝑐, 𝑐]; linestyle=:dash)
           annotate!([(0, 𝑐, text("(0, c)", 8, :left)),
                      (𝑏, 𝑐, text("(b, c)", 8, :left)),
                      (x, y, text("(x₀, y₀)", 8, :left))])

           plot!([0, 0], [𝑎, 𝑐 + 𝑏]; color=:green)
           plot!([x, x], [y, 𝑐 + sqrt(𝑏^2 - x^2)]; color=:green)
           p
       end

julia> a1 = integrate(c + sqrt(b^2 - x^2) - (sqrt(a^2 - x^2)), (x, 0, x₀))
         ⎛       _____________________⎞          ⎛       _____________________
         ⎜      ╱                   2 ⎟          ⎜      ╱
2
         ⎜     ╱      ⎛ 2    2    2⎞  ⎟          ⎜     ╱      ⎛ 2    2    2⎞
         ⎜    ╱       ⎝a  - b  + c ⎠  ⎟          ⎜    ╱       ⎝a  - b  + c ⎠
         ⎜   ╱    a - ─────────────── ⎟          ⎜   ╱    a - ───────────────
         ⎜  ╱                  2      ⎟          ⎜  ╱                  2

   2     ⎜╲╱                4⋅c       ⎟    2     ⎜╲╱                4⋅c

  a ⋅asin⎜────────────────────────────⎟   b ⋅asin⎜────────────────────────────
         ⎝             a              ⎠          ⎝             b

- ───────────────────────────────────── + ────────────────────────────────────
                    2                                       2




⎞

⎟

⎟                                           _____________________        _____
⎟                                          ╱                   2        ╱

⎟                                         ╱      ⎛ 2    2    2⎞        ╱

⎟            _____________________       ╱       ⎝a  - b  + c ⎠       ╱

⎟           ╱                   2       ╱    a - ─────────────── ⋅   ╱    -a +
⎟          ╱      ⎛ 2    2    2⎞       ╱                  2         ╱

⎠         ╱       ⎝a  - b  + c ⎠     ╲╱                4⋅c        ╲╱

─ + c⋅   ╱    a - ───────────────  + ─────────────────────────────────────────
        ╱                  2                                        2

      ╲╱                4⋅c






______________________          _____________________        _________________
                    2          ╱                   2        ╱

      ⎛ 2    2    2⎞          ╱      ⎛ 2    2    2⎞        ╱           ⎛ 2

  2   ⎝a  - b  + c ⎠         ╱       ⎝a  - b  + c ⎠       ╱    2       ⎝a  - b
 b  + ───────────────       ╱    a - ─────────────── ⋅   ╱    a  - a + ───────
               2           ╱                  2         ╱

            4⋅c          ╲╱                4⋅c        ╲╱
 4
────────────────────── - ─────────────────────────────────────────────────────
                                                       2






_________
       2
2    2⎞
  + c ⎠
────────
  2
⋅c
─────────



julia> a2 = integrate(c + sqrt(b^2 - x^2) - (c - sqrt(b^2 - x^2)), (x, x₀, b))
         ⎛       _____________________⎞

         ⎜      ╱                   2 ⎟

         ⎜     ╱      ⎛ 2    2    2⎞  ⎟

         ⎜    ╱       ⎝a  - b  + c ⎠  ⎟                 _____________________
         ⎜   ╱    a - ─────────────── ⎟                ╱                   2
         ⎜  ╱                  2      ⎟      2        ╱      ⎛ 2    2    2⎞

   2     ⎜╲╱                4⋅c       ⎟   π⋅b        ╱       ⎝a  - b  + c ⎠

- b ⋅asin⎜────────────────────────────⎟ + ──── -    ╱    a - ─────────────── ⋅
         ⎝             b              ⎠    2       ╱                  2

                                                 ╲╱                4⋅c





       ___________________________
      ╱                         2
     ╱            ⎛ 2    2    2⎞
    ╱         2   ⎝a  - b  + c ⎠
   ╱    -a + b  + ───────────────
  ╱                        2
╲╱                      4⋅c

julia> A = 2(a1 + a2)
         ⎛       _____________________⎞          ⎛       _____________________
         ⎜      ╱                   2 ⎟          ⎜      ╱
2
         ⎜     ╱      ⎛ 2    2    2⎞  ⎟          ⎜     ╱      ⎛ 2    2    2⎞
         ⎜    ╱       ⎝a  - b  + c ⎠  ⎟          ⎜    ╱       ⎝a  - b  + c ⎠
         ⎜   ╱    a - ─────────────── ⎟          ⎜   ╱    a - ───────────────
         ⎜  ╱                  2      ⎟          ⎜  ╱                  2

   2     ⎜╲╱                4⋅c       ⎟    2     ⎜╲╱                4⋅c

- a ⋅asin⎜────────────────────────────⎟ - b ⋅asin⎜────────────────────────────
         ⎝             a              ⎠          ⎝             b




⎞

⎟

⎟

⎟                     _____________________          _____________________

⎟                    ╱                   2          ╱                   2

⎟                   ╱      ⎛ 2    2    2⎞          ╱      ⎛ 2    2    2⎞

⎟      2           ╱       ⎝a  - b  + c ⎠         ╱       ⎝a  - b  + c ⎠

⎟ + π⋅b  + 2⋅c⋅   ╱    a - ───────────────  -    ╱    a - ─────────────── ⋅

⎠                ╱                  2           ╱                  2         ╱
               ╲╱                4⋅c          ╲╱                4⋅c        ╲╱







    ___________________________          _____________________        ________
   ╱                         2          ╱                   2        ╱

  ╱            ⎛ 2    2    2⎞          ╱      ⎛ 2    2    2⎞        ╱

 ╱         2   ⎝a  - b  + c ⎠         ╱       ⎝a  - b  + c ⎠       ╱    2

╱    -a + b  + ───────────────  -    ╱    a - ─────────────── ⋅   ╱    a  - a
                        2           ╱                  2         ╱

                     4⋅c          ╲╱                4⋅c        ╲╱





__________________
                2
  ⎛ 2    2    2⎞
  ⎝a  - b  + c ⎠
+ ───────────────
           2
julia>

julia> A(a => 1, b => 3//2, c => 2)
        ⎛√15⎞
  9⋅asin⎜───⎟
        ⎝ 8 ⎠       ⎛3⋅√15⎞   3⋅√15   9⋅π
- ─────────── - asin⎜─────⎟ + ───── + ───
       4            ⎝  16 ⎠     8      4

julia> A(c=>3, a=>1, b=>2)
4⋅π

julia> f(x) = x^3
f (generic function with 1 method)

julia> xs = range(-1, stop=1, length=50)
-1.0:0.04081632653061224:1.0

julia> ys = f.(xs)
50-element Vector{Float64}:
 -1.0
 -0.8824809390645053
 -0.7745497199296212
 -0.675798349327236
 -0.5858188339892393
 -0.5042031806475192
 -0.43054339603396535
  ⋮
  0.5042031806475192
  0.5858188339892393
  0.675798349327236
  0.7745497199296212
  0.8824809390645053
  1.0

julia> plot(ys, xs)

julia> ys = range(-1, stop=1, length=50)
-1.0:0.04081632653061224:1.0

julia> xs = [y^3 for y in ys]
50-element Vector{Float64}:
 -1.0
 -0.8824809390645053
 -0.7745497199296212
 -0.675798349327236
 -0.5858188339892393
 -0.5042031806475192
 -0.43054339603396535
  ⋮
  0.5042031806475192
  0.5858188339892393
  0.675798349327236
  0.7745497199296212
  0.8824809390645053
  1.0

julia> plot(xs, ys)

julia>

julia>

julia> ys = range(0, stop=2, length=50)
0.0:0.04081632653061224:2.0

julia> xs = [y^2 for y in ys]
50-element Vector{Float64}:
 0.0
 0.0016659725114535606
 0.006663890045814243
 0.014993752603082049
 0.02665556018325697
 0.04164931278633903
 0.059975010412328195
 ⋮
 3.225322782174094
 3.3735943356934612
 3.5251978342357355
 3.680133277800916
 3.8384006663890045
 4.0

julia> plot(xs, ys)

julia> xs = [2-y for y in ys]
50-element Vector{Float64}:
 2.0
 1.9591836734693877
 1.9183673469387754
 1.8775510204081634
 1.836734693877551
 1.7959183673469388
 1.7551020408163265
 ⋮
 0.20408163265306123
 0.16326530612244894
 0.12244897959183665
 0.08163265306122458
 0.04081632653061229
 0.0

julia> plot!(xs, ys)

julia> plot!(zero)

julia>

julia> f(y) = 2-y
f (generic function with 1 method)

julia> g(y) = y^2
g (generic function with 1 method)

julia> a, b = 0, 1
(0, 1)

julia> quadgk(y -> f(y) - g(y), a, b)[1]
1.1666666666666667
